/*package DAO;

import DbInterface.DbConnection;
import DbInterface.IDbConnection;
import Model.Prodotto;
import Model.Prodotto_Quantita;
import Model.Produttore;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

public class Prodotto_QuantitaDAO implements IProdotto_QuantitaDAO{

    private static Prodotto_QuantitaDAO instance = new Prodotto_QuantitaDAO();
    private Prodotto_Quantita prodotto_q;
    private static IDbConnection conn;
    private static ResultSet rs;

    private Prodotto_QuantitaDAO(){
        prodotto_q = null;
        conn = null;
        rs = null;
    }

    public static Prodotto_QuantitaDAO getInstance() {
        return instance;
    }

    @Override
    public int add(Prodotto_Quantita prodotto_q) {
        conn = DbConnection.getInstance();
        int rowCount = conn.executeUpdate("INSERT INTO prodotto_composito(idProdottoComposito,idProdotto,quantita) VALUES ('"+ CategoriaProdottoDAO.getInstance().findByName(prodotto.getCategoria().getNome(),1).getIdCategoria() + "','" + prodotto.getPrezzo() + "','" + prodotto.getNome() + "','" + prodotto.getDescrizione() + "');");System.out.println(ArticoloDAO.getInstance().findByName(prodotto.getNome(),1).getId() + "," + ProduttoreDAO.getInstance().findByName(prodotto.getProduttore().getNome(),1).getIdProduttore());
        conn.executeUpdate("INSERT INTO prodotto(idProdotto,idProduttore) VALUES ('"+  ArticoloDAO.getInstance().findByName(prodotto.getNome(),1).getId() + "','" + ProduttoreDAO.getInstance().findByName(prodotto.getProduttore().getNome(),1).getIdProduttore() +"');");
        conn.close();
        return rowCount;
    }

    @Override
    public int update(Prodotto_Quantita prodotto_q) {
        conn = DbConnection.getInstance();
        int rowCount = conn.executeUpdate("UPDATE articolo SET idCategoria = '"+ CategoriaProdottoDAO.getInstance().findByName(prodotto.getCategoria().getSottocategorie().get(0).getNome(),1).getIdCategoria() + "', prezzo = '" + prodotto.getPrezzo() + "', nome = '" + prodotto.getNome() + "', immagine = '" + prodotto.getImmagine() + "', descrizione = '" + prodotto.getDescrizione() + "';");
        conn.executeUpdate("UPDATE prodotto SET idProduttore = '" + ProduttoreDAO.getInstance().findByName(prodotto.getProduttore().getNome(),1).getIdProduttore() + "';");
        conn.close();
        return rowCount;
    }

    @Override
    public int delete(Prodotto_Quantita prodotto_q) {
        conn = DbConnection.getInstance();
        conn.executeUpdate("DELETE FROM prodottocomposito WHERE idProdotto = '" + prodotto.getId() + "' OR idProdottoComposito = '" + prodotto.getId() + "';");
        conn.executeUpdate("DELETE FROM prodotto WHERE idProdotto = '" + prodotto.getId() + "';");
        conn.executeUpdate("DELETE FROM commento WHERE idArticolo = '" + prodotto.getId() + "';");
        conn.executeUpdate("DELETE FROM lista_has_articolo WHERE idArticolo = '" + prodotto.getId() + "';");
        int rowCount = conn.executeUpdate("DELETE FROM articolo WHERE idArticolo = '"+ prodotto.getId() + "';");
        conn.close();
        return rowCount;
    }


    @Override
    public Prodotto_Quantita findByID(int idProdotto) {
        conn = DbConnection.getInstance();
        rs = conn.executeQuery("SELECT * FROM prodotto INNER JOIN articolo ON prodotto.idProdotto = articolo.idArticolo WHERE prodotto.idProdotto = '" + idProdotto + "';");
        Prodotto prodotto;
        try {
            rs.next();
            prodotto = new Prodotto();
            prodotto.setId(rs.getInt("idProdotto"));
            prodotto.setNome(rs.getString("nome"));
            prodotto.setCategoria(CategoriaProdottoDAO.getInstance().findTopCategoria(CategoriaProdottoDAO.getInstance().findByID(rs.getInt("idCategoria")).getNome()));
            prodotto.setPrezzo(rs.getFloat("prezzo"));
            prodotto.setImmagine(rs.getBlob("immagine"));
            prodotto.setDescrizione(rs.getString("descrizione"));
            prodotto.setProduttore(ProduttoreDAO.getInstance().findByID(rs.getInt("idProduttore")));
            return prodotto;
        } catch (SQLException e) {
            // Gestisce le differenti categorie d'errore
            System.out.println("SQLException: " + e.getMessage());
            System.out.println("SQLState: " + e.getSQLState());
            System.out.println("VendorError: " + e.getErrorCode());
        } catch (NullPointerException e) {
            // Gestisce le differenti categorie d'errore
            System.out.println("Resultset: " + e.getMessage());
        } finally {
            conn.close();
        }
        return null;
    }

    @Override
    public Prodotto_Quantita findByName(String nomeProdotto) {
        conn = DbConnection.getInstance();
        rs = conn.executeQuery("SELECT * FROM prodotto INNER JOIN articolo ON prodotto.idProdotto = articolo.idArticolo WHERE articolo.nome = '" + nomeProdotto + "';");
        Prodotto prodotto = new Prodotto();
        try {
            rs.next();
            prodotto.setId(rs.getInt("idArticolo"));
            prodotto.setNome(rs.getString("nome"));
            prodotto.setCategoria(CategoriaProdottoDAO.getInstance().findTopCategoria(CategoriaProdottoDAO.getInstance().findByID(rs.getInt("idCategoria")).getNome()));
            prodotto.setPrezzo(rs.getFloat("prezzo"));
            prodotto.setImmagine(rs.getBlob("immagine"));
            prodotto.setDescrizione(rs.getString("descrizione"));
            prodotto.setProduttore(ProduttoreDAO.getInstance().findByID(rs.getInt("idProduttore")));
            return prodotto;
        } catch (SQLException e) {
            // Gestisce le differenti categorie d'errore
            System.out.println("SQLException: " + e.getMessage());
            System.out.println("SQLState: " + e.getSQLState());
            System.out.println("VendorError: " + e.getErrorCode());
        } catch (NullPointerException e) {
            // Gestisce le differenti categorie d'errore
            System.out.println("Resultset: " + e.getMessage());
        } finally {
            conn.close();
        }
        return null;
    }

    @Override
    public ArrayList<Prodotto_Quantita> findAll() {
        conn = DbConnection.getInstance();
        rs = conn.executeQuery("SELECT * FROM articolo INNER JOIN prodotto WHERE idArticolo = idProdotto;");
        ArrayList<Prodotto> prodotti = new ArrayList<>();
        try {
            while (rs.next()) {
                prodotto = new Prodotto();
                prodotto.setId(rs.getInt("idArticolo"));
                prodotto.setCategoria(CategoriaProdottoDAO.getInstance().findTopCategoria(CategoriaProdottoDAO.getInstance().findByID(rs.getInt("idCategoria")).getNome()));
                prodotto.setPrezzo(rs.getFloat("prezzo"));
                prodotto.setNome(rs.getString("nome"));
                prodotto.setImmagine(rs.getBlob("immagine"));
                prodotto.setDescrizione(rs.getString("descrizione"));
                prodotto.setProduttore(findProduttore(rs.getInt("idProduttore")));
                prodotti.add(prodotto);
            }
            return prodotti;
        } catch (SQLException e) {
            // Gestisce le differenti categorie d'errore
            System.out.println("SQLException: " + e.getMessage());
            System.out.println("SQLState: " + e.getSQLState());
            System.out.println("VendorError: " + e.getErrorCode());
        } catch (NullPointerException e) {
            // Gestisce le differenti categorie d'errore
            System.out.println("Resultset: " + e.getMessage());
        } finally {
            conn.close();
        }
        return null;
    }



    @Override
    public Produttore findProduttore(int idProduttore){
        ProduttoreDAO pDAO = ProduttoreDAO.getInstance();
        return pDAO.findByID(idProduttore);
    }


}
*/